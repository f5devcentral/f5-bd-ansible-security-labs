---  
- name: ASM Policy Update with Blocked URLS, IPs or Both
  hosts: lb
  connection: local
  gather_facts: false 
  vars:
    Blocked_IPs_Events: "{{ ansible_eda.event.payload }}"
    F5_VIP_Name: VS_WEB
    F5_VIP_Port: "80"
    F5_Admin_Port: "443"
    ASM_Policy_Name: "WAF-POLICY"
    ASM_Policy_Directory: "/tmp/f5/"
    ASM_Policy_File: "WAF-POLICY.xml"

  tasks:

  - name: Setup provider
    ansible.builtin.set_fact:
     provider:
      server: "{{ ansible_host }}"
      user: "{{ ansible_user }}"
      password: "{{ ansible_password }}"
      server_port: "{{ F5_Admin_Port }}"
      validate_certs: "no"

  - name: Blocked IP Events From EDA
    debug:
      msg: "{{ Blocked_IPs_Events.payload }}"

  - name: Create Array from BlockedIPs
    ansible.builtin.set_fact:
        Blocked_IPs: "{{ Blocked_IPs_Events.payload.split(', ') }}"
    when: Blocked_IPs_Events is defined

  - name: Remove Last Object from Array which is empty array object
    ansible.builtin.set_fact:
        Blocked_IPs: "{{ Blocked_IPs[:-1] }}"
    when: Blocked_IPs_Events is defined

  - debug:
      msg: "{{ Blocked_IPs }}"

#Fetch ASM_Policy to Variable
  - name: Fetching ASM Policy
    f5networks.f5_modules.bigip_asm_policy_fetch:
      provider: "{{ provider }}"
      name: "{{ ASM_Policy_Name }}"
      inline: yes
      force: yes
    register: ASM_Policy
    when: Blocked_URLs is defined or Blocked_IPs is defined

  - name: Create tmp directory if it does not exist
    ansible.builtin.file:
      path: "{{ ASM_Policy_Directory }}"
      state: directory
      mode: '0755'
    delegate_to: localhost
     
#Output Data to File due to BUG 1390
  - ansible.builtin.copy:
      content: "{{ ASM_Policy.inline_policy }}"
      dest: "{{ASM_Policy_Directory}}{{ ASM_Policy_File }}"
    when: Blocked_URLs is defined or Blocked_IPs is defined
    delegate_to: localhost

#Validate Existing IP Addresses
  - name: Validate Existing IP Addresses
    ansible.builtin.shell: grep "<ip_address>{{ item }}" {{ASM_Policy_Directory}}{{ ASM_Policy_File }}
    register: Blocked_IP_Valid
    with_items: "{{ Blocked_IPs }}"
    ignore_errors: yes
    when: Blocked_IPs is defined and item != ""
    delegate_to: localhost

#Import Additional Disallowed IPs
  - name: Add Disallowed IPs
    community.general.xml:
      path: "{{ASM_Policy_Directory}}{{ ASM_Policy_File }}"
      pretty_print: yes
      input_type: xml
      insertafter: yes
      xpath: /policy/geolocation
      add_children: "<whitelist><ip_address>{{ item.item }}</ip_address><subnet_mask>255.255.255.255</subnet_mask><policy_builder_trusted>false</policy_builder_trusted><ignore_anomalies>false</ignore_anomalies><never_log>false</never_log><block_ip>Always</block_ip><never_learn>false</never_learn><description>blocked</description><ignore_ip_reputation>false</ignore_ip_reputation></whitelist>"
    with_items: "{{ Blocked_IP_Valid.results }}"
    when: Blocked_IPs is defined and item != "" and item.rc == 1 
    delegate_to: localhost

# #Validate Existing URL Addresses
#   - name: Validate Existing URL Addresses
#     ansible.builtin.shell: grep 'name="{{ item }}"' {{ ASM_Policy_File }}
#     register: Blocked_URLs_Valid
#     with_items: "{{ Blocked_URLs }}"
#     ignore_errors: yes
#     when: Blocked_URLs is defined

# #create Disallowed URLs Section if missing
#   - name: Add Disallowed URLs
#     community.general.xml:
#       path: "{{ ASM_Policy_File }}"
#       input_type: xml
#       pretty_print: yes
#       insertafter: yes
#       xpath: /policy/urls/url[*]
#       add_children: "<disallowed_urls></disallowed_urls>"
#     when: "'<disallowed_urls>' not in lookup('file', ASM_Policy_File ) and Blocked_URLs is defined"

# #Import Additional Disallowed URLs
#   - name: Add Disallowed URLs
#     community.general.xml:
#       path: "{{ ASM_Policy_File }}"
#       input_type: xml
#       pretty_print: yes
#       xpath: /policy/urls/disallowed_urls
#       add_children:
#         - "<url protocol=\"HTTP\" type=\"explicit\" name=\"{{ item.item }}\"/>"
#         - "<url protocol=\"HTTPS\" type=\"explicit\" name=\"{{ item.item }}\"/>"
#     with_items: "{{ Blocked_URLs_Valid.results }}"
#     when: Blocked_URLs is defined and item.rc == 1

# #Enable Illegal URL Blocking Violations
#   - name: Illegal URL Blocking Violations Enablement
#     community.general.xml:
#       path: "{{ ASM_Policy_File }}"
#       input_type: xml
#       pretty_print: yes
#       xpath: /policy/blocking/violation[@name="Illegal URL"]
#       set_children:
#         - "<alarm>true</alarm>"
#         - "<block>true</block>"
#         - "<learn>true</learn>"
#         - "<policy_builder_tracking>enabled</policy_builder_tracking>"
#     when: Blocked_URLs is defined  

#Re-Deploy ASM policy
  - name: Create an LTM policy
    f5networks.f5_modules.bigip_policy:
      provider: "{{provider}}"
      name: "{{ ASM_Policy_Name }}"
      state: present
    when: Blocked_URLs is defined or Blocked_IPs is defined
    delegate_to: localhost

  - name: Import ASM policy
    f5networks.f5_modules.bigip_asm_policy_import:
      provider: "{{provider}}"
      name: "{{ ASM_Policy_Name }}"
      source: "{{ASM_Policy_Directory}}{{ ASM_Policy_File }}"
      force: yes
    when: Blocked_URLs is defined or Blocked_IPs is defined
    delegate_to: localhost

  - name: Replace a forward action with an ASM action
    f5networks.f5_modules.bigip_policy_rule:
      provider: "{{ provider }}"
      policy: "{{ ASM_Policy_Name }}"
      name: rule1
      actions:
      - type: enable
        asm_policy: "{{ ASM_Policy_Name }}"
    when: Blocked_URLs is defined or Blocked_IPs is defined
    delegate_to: localhost

  - name: Deploy Draft ASM policy
    f5networks.f5_modules.bigip_policy:
      provider: "{{provider}}"
      name: "{{ ASM_Policy_Name }}"
      state: present
      rules:
      - rule1
    when: Blocked_URLs is defined or Blocked_IPs is defined
    delegate_to: localhost

# #Assign ASM Policy to VIP
#   - name: Modify Existing VS
#     f5networks.f5_modules.bigip_virtual_server:
#       provider: "{{ provider }}"
#       state: present
#       description: "HTTPS Virtual Server"
#       name: "{{ F5_VIP_Name }}"
#       destination: "{{ private_ip }}"
#       port: "F5_VIP_Port"
#       pool: "{{ F5_VIP_Name }}_pool"
#       snat: Automap
#       profiles:
#        - http
#        - oneconnect
#        - name: clientssl
#          context: client-side
#        - websecurity
#       policies:
#        - "{{ ASM_Policy_Name }}"
#     when: F5_VIP_Name is defined

#Apply Draft ASM policy
  - name: Activate ASM Policy
    f5networks.f5_modules.bigip_asm_policy_manage:
      provider: "{{ provider }}"
      name: "{{ ASM_Policy_Name }}"
      active: yes
    delegate_to: localhost

#Publish ASM Policy via TMSH
  - name: Publish ASM Policy via TMSH
    f5networks.f5_modules.bigip_command:
      commands: "publish asm policy {{ ASM_Policy_Name }}"
      provider: "{{ provider }}"
    delegate_to: localhost

  # - name: Change ASM Policy to Blocking
  #   bigip_command:
  #     commands:
  #     - modify asm policy WAF-POLICY blocking-mode enabled
  #     - publish asm policy WAF-POLICY
  #     provider: "{{ provider }}"
